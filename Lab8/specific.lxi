%{ 	 
#include <stdio.h>
#include <string.h>
int lines = 0;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
WORD		\"[a-zA-Z0-9]*\"
NUMBER		[+-]?[1-9][0-9]*|0$
CHARACTER 	\'[a-zA-Z0-9]\'
CONST		{WORD}|{NUMBER}|{CHARACTER}
ID 		[a-zA-Z][a-zA-Z0-9_]*

%%

if            {printf("Reserved word: %s\n", yytext);}
write              {printf("Reserved word: %s\n", yytext);}
read            {printf("Reserved word: %s\n", yytext);}
int               {printf("Reserved word: %s\n", yytext);}
bool             {printf("Reserved word: %s\n", yytext);}
true             {printf("Reserved word: %s\n", yytext); }
false             {printf("Reserved word: %s\n", yytext);}
loop               {printf("Reserved word: %s\n", yytext);}
and              {printf("Reserved word: %s\n", yytext);}
or             {printf("Reserved word: %s\n", yytext);}
not             {printf("Reserved word: %s\n", yytext);}
start             {printf("Reserved word: %s\n", yytext);}
{ID}	{printf( "Identifier: %s\n", yytext );}
{CONST}	{printf( "Constant: %s\n", yytext );}
"="	    {printf( "Separator: %s\n", yytext );}
","	    {printf( "Separator: %s\n", yytext );}
"."	    {printf( "Separator: %s\n", yytext );}
"{"	    {printf( "Separator: %s\n", yytext );}
"}"	    {printf( "Separator: %s\n", yytext );}
"("	    {printf( "Separator: %s\n", yytext );}
")"	    {printf( "Separator: %s\n", yytext );}
"["	    {printf( "Separator: %s\n", yytext );}
"]"	    {printf( "Separator: %s\n", yytext );}
";"	    {printf( "Separator: %s\n", yytext );}
"+"	    {printf( "Operator: %s\n", yytext );}
"-"	    {printf( "Operator: %s\n", yytext );}
"%"	    {printf( "Operator: %s\n", yytext );}
"*"	    {printf( "Operator: %s\n", yytext );}
"/"	    {printf( "Operator: %s\n", yytext );}
"<"	    {printf( "Operator: %s\n", yytext );}
">"	    {printf( "Operator: %s\n", yytext );}
">="	{printf( "Operator: %s\n", yytext );}
"<="	{printf( "Operator: %s\n", yytext );}
"!="	{printf( "Operator: %s\n", yytext );}
"=="	{printf( "Operator: %s\n", yytext );}




[ \t]+  	{}
[\n]+ {lines++;}
		 
[+-]?0[0-9]* {printf("Illegal constant at line %d \n", lines); return -1; }

[0-9~@#$%^][a-zA-Z0-9]	{printf("Illegal identifier at line %d \n", lines); return -1; }

\"[a-zA-Z0-9] {printf("Expected end of string on line %d\n", lines); return -1; }
%%

