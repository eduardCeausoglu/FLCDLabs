%{ 	 
#include <stdio.h>
#include <string.h>
#include "parser.tab.h"
int lines = 0;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
WORD		\"[a-zA-Z0-9]*\"
NUMBER		[+-]?[1-9][0-9]*|0$
CHARACTER 	\'[a-zA-Z0-9]\'
CONST		{WORD}|{NUMBER}|{CHARACTER}
ID 		[a-zA-Z][a-zA-Z0-9_]*

%%

if            {printf("Reserved word: %s\n", yytext); return IF;}
write              {printf("Reserved word: %s\n", yytext); return OUT;}
read            {printf("Reserved word: %s\n", yytext); return IN;}
int               {printf("Reserved word: %s\n", yytext); return NUMBER;}
bool             {printf("Reserved word: %s\n", yytext); return BOOL;}
true             {printf("Reserved word: %s\n", yytext);  return TRUE;}
false             {printf("Reserved word: %s\n", yytext); return FALSE;}

loop               {printf("Reserved word: %s\n", yytext);  return FOR;}
and              {printf("Reserved word: %s\n", yytext); return AND;}
or             {printf("Reserved word: %s\n", yytext); return OR;}
not             {printf("Reserved word: %s\n", yytext); return NOT;}
start             {printf("Reserved word: %s\n", yytext);  return MAIN;}

{ID}	{printf( "Identifier: %s\n", yytext );  return IDENTIFIER;}

{CONST}	{printf( "Constant: %s\n", yytext );  return CONSTANT;}

"="	    {printf( "Separator: %s\n", yytext ); return EQUAL;}
","	    {printf( "Separator: %s\n", yytext ); return COMA;}
"."	    {printf( "Separator: %s\n", yytext ); return DOT;}
"{"	    {printf( "Separator: %s\n", yytext ); return LEFT_CURLY_PARENTHESIS;}
"}"	    {printf( "Separator: %s\n", yytext ); return RIGHT_CURLY_PARENTHESIS;}
"("	    {printf( "Separator: %s\n", yytext ); return LEFT_ROUND_PARENTHESIS;}
")"	    {printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_PARENTHESIS;}
"["	    {printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_PARENTHESIS;}
"]"	    {printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_PARENTHESIS;}
";"	    {printf( "Separator: %s\n", yytext ); return SEMICOLON;}
"+"	    {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	    {printf( "Operator: %s\n", yytext ); return MINUS;}
"%"	    {printf( "Operator: %s\n", yytext ); return MOD;}
"*"	    {printf( "Operator: %s\n", yytext ); return MULTIPLY;}
"/"	    {printf( "Operator: %s\n", yytext ); return DIVISION;}
"<"	    {printf( "Operator: %s\n", yytext ); return SMALLER;}
">"	    {printf( "Operator: %s\n", yytext ); return GREATER;}
">="	{printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL;}
"<="	{printf( "Operator: %s\n", yytext ); return SMALLER_OR_EQUAL;}
"!="	{printf( "Operator: %s\n", yytext );  return DIFFERENT;}
"=="	{printf( "Operator: %s\n", yytext );  return ARE_EQUAL;}




[ \t]+  	{}
[\n]+ {lines++;}
		 
[+-]?0[0-9]* {printf("Illegal constant at line %d \n", lines); return -1; }

[0-9~@#$%^][a-zA-Z0-9]	{printf("Illegal identifier at line %d \n", lines); return -1; }

\"[a-zA-Z0-9] {printf("Expected end of string on line %d\n", lines); return -1; }
%%

